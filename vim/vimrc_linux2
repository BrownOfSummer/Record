" 去掉讨厌的有关vi一致性模式，避免以前版本的一些bug和局限
set nocompatible

set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1

set backspace=indent,eol,start

" 第一行设置tab键为4个空格，第二行设置当行之间交错时使用4个空格
set tabstop=4
set shiftwidth=4

set cindent

" 在编辑过程中，在右下角显示光标位置的状态行
set ruler

set showcmd
set hlsearch
set incsearch
set cino=g0:0          " let class's public: don't indent

" F12 run python
map <F12> :!/usr/bin/python %

map <c-w><c-t> :Tlist<cr>
map <c-w><c-m> :WMToggle<cr>
map <c-w><c-f> :FirstExplorerWindow<cr>
map <c-w><c-b> :BottomExplorerWindow<cr>
":set cscopequickfix=s-,c-,d-,i-,t-,e-
":cs add /home/broom/yeast/trunk/cscope.out /home/broom/yeast/trunk/
let g:winManagerWindowLayout='FileExplorer|TagList'
let Tlist_Show_One_File=0
let Tlist_File_Fold_Auto_Close=1
let Tlist_Exit_Onlywindow=1
let Tlist_Use_Right_Window=1
":nmap wm :WMToggle<cr>
nnoremap <silent> <F3> :Grep<CR>

" 语法高亮度显示
syntax on

filetype plugin indent on
set viminfo='20,\"50

" 设置历史的行数
set history=1000

" Only do this part when compiled with support for autocommands
if has("autocmd")
    " In text files, always limit the width of text to 78 characters
    autocmd BufRead *.txt set tw=78
    " When editing a file, always jump to the last cursor position
    autocmd BufReadPost *
        \ if line("'\"") > 0 && line ("'\"") <= line("$") |
        \   exe "normal g'\"" |
        \ endif
endif
set bg=dark

" 显示行号
set nu
colorscheme desert

imap <c-w> <Esc>

autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete


" enable filetype plugins
filetype plugin on
" pydiction 1.2 python auto complete file type
let g:pydiction_location = '~/.vim/tools/pydiction/complete-dict'
" default g:pydiction_menu_height = 15
let g:pydiction_menu_height = 20


"------------------------------------------------------------------------------
""获取当前路径的上一级的路径
function! GET_UP_PATH(dir)
    let pos=len(a:dir)-1
    while pos>0
        if (a:dir[pos]=="/" )
            return  strpart(a:dir,0,pos)
        endif
        let pos=pos-1
    endwhile
    return  ""
endfunction

"设置相关tags
function! s:SET_TAGS()
    let dir = expand("%:p:h") "获得源文件路径
        "在路径上递归向上查找tags文件 
        while dir!=""
            if findfile("tags",dir) !=""
                "找到了就加入到tags
                 exec "set tags+=" . dir . "/tags"
             endif
            "得到上级路径
            let dir=GET_UP_PATH(dir)
        endwhile
    endfunction

autocmd BufEnter * call s:SET_TAGS()
"------------------------------------------------------------------------------
function! SET_PYTHON_IDENT()
	set expandtab
	set shiftwidth=4
	set softtabstop=4
	set tabstop=4
	"set backspace=2
	set smarttab
endfunction

au FileType python,ruby :call SET_PYTHON_IDENT()

"c-support year date time
let g:C_FormatDate            = '%Y-%m-%d'
let g:C_FormatTime            = '%H:%M:%S'
let g:C_FormatYear            = '%Y'

function AlignAssignments ()
    "Patterns needed to locate assignment operators...
    let ASSIGN_OP   = '[-+*/%|&]\?=\@<!=[=~]\@!'
    let ASSIGN_LINE = '^\(.\{-}\)\s*\(' . ASSIGN_OP . '\)'

    "Locate block of code to be considered (same indentation, no blanks)
    let indent_pat = '^' . matchstr(getline('.'), '^\s*') . '\S'
    let firstline  = search('^\%('. indent_pat . '\)\@!','bnW') + 1
    let lastline   = search('^\%('. indent_pat . '\)\@!', 'nW') - 1
    if lastline < 0
        let lastline = line('$')
    endif

    "Find the column at which the operators should be aligned...
    let max_align_col = 0
    let max_op_width  = 0
    for linetext in getline(firstline, lastline)
        "Does this line have an assignment in it?
        let left_width = match(linetext, '\s*' . ASSIGN_OP)

        "If so, track the maximal assignment column and operator width...
        if left_width >= 0
            let max_align_col = max([max_align_col, left_width])

            let op_width      = strlen(matchstr(linetext, ASSIGN_OP))
            let max_op_width  = max([max_op_width, op_width+1])
         endif
    endfor

    "Code needed to reformat lines so as to align operators...
    let FORMATTER = '\=printf("%-*s%*s", max_align_col, submatch(1),
    \                                    max_op_width,  submatch(2))'

    " Reformat lines with operators aligned in the appropriate column...
    for linenum in range(firstline, lastline)
        let oldline = getline(linenum)
        let newline = substitute(oldline, ASSIGN_LINE, FORMATTER, "")
        call setline(linenum, newline)
    endfor
endfunction

nmap <silent> ;= :call AlignAssignments()<CR>

"added by check-c"
set softtabstop=4
set ai
set smartindent
set smarttab
set expandtab
syntax on
filetype plugin indent on
set viminfo='20,\"50
set history=50
" Only do this part when compiled with support for autocommands
if has("autocmd")
    " In text files, always limit the width of text to 78 characters
    autocmd BufRead *.txt set tw=78
    " When editing a file, always jump to the last cursor position
    autocmd BufReadPost *
        \ if line("'\"") > 0 && line ("'\"") <= line("$") |
        \   exe "normal g'\"" |
        \ endif
endif
" set bg=dark
set nu
" imap <c-w> <Esc>

"------------------------------------------------------------------------------
""获取当前路径的上一级的路径
function! GET_UP_PATH(dir)
    let pos=len(a:dir)-1
    while pos>0
        if (a:dir[pos]=="/" )
            return  strpart(a:dir,0,pos)
        endif
        let pos=pos-1
    endwhile
    return  ""
endfunction

"设置相关tags
function! s:SET_TAGS()
    let dir = expand("%:p:h") "获得源文件路径
        "在路径上递归向上查找tags文件 
        while dir!=""
            if findfile("tags",dir) !=""
                "找到了就加入到tags
                 exec "set tags+=" . dir . "/tags"
             endif
            "得到上级路径
            let dir=GET_UP_PATH(dir)
        endwhile
    endfunction

autocmd BufEnter * call s:SET_TAGS()
"------------------------------------------------------------------------------

" add c++ stl tags
set tags+=~/.vim/cplusplustags
let OmniCpp_DefaultNamespaces=["std","_GLIBCXX_STD"]
set tags+=~/.vim/systags

set cursorline

"added by check-c end"
